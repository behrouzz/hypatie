"""
Module iau1980
==============
Transform coordinates from ICRF to the CEP base on IAU 1976 Precession
Model and IAU 1980 Theory of Nutation.
Ref: https://gssc.esa.int/navipedia/index.php/ICRF_to_CEP
"""

from numpy import sin, cos, array, pi, matmul
from .time import utc2tdb, datetime_to_jd
from datetime import datetime
import pandas as pd
from io import StringIO

nut_IAU1980 = """
i,k_i1,k_i2,k_i3,k_i4,k_i5,period,A_0j,A_1j,B_0j,B_1j
1,0.0,0.0,0.0,0.0,1.0,-6798.4,-17.1996,-174.2,9.2025,8.9
2,0.0,0.0,2.0,-2.0,2.0,182.6,-1.3187,-1.6,0.5736,-3.1
3,0.0,0.0,2.0,0.0,2.0,13.7,-0.22740000000000002,-0.2,0.09770000000000001,-0.5
4,0.0,0.0,0.0,0.0,2.0,-3399.2,0.20620000000000002,0.2,-0.08950000000000001,0.5
5,0.0,-1.0,0.0,0.0,0.0,-365.3,-0.1426,3.4,0.0054,-0.1
6,1.0,0.0,0.0,0.0,0.0,27.6,0.0712,0.1,-0.0007,0.0
7,0.0,1.0,2.0,-2.0,2.0,121.7,-0.0517,1.2,0.0224,-0.6
8,0.0,0.0,2.0,0.0,1.0,13.6,-0.0386,-0.4,0.02,0.0
9,1.0,0.0,2.0,0.0,2.0,9.1,-0.030100000000000002,0.0,0.0129,-0.1
10,0.0,-1.0,2.0,-2.0,2.0,365.2,0.0217,-0.5,-0.0095,0.3
11,-1.0,0.0,0.0,2.0,0.0,31.8,0.0158,0.0,-0.0001,0.0
12,0.0,0.0,2.0,-2.0,1.0,177.8,0.0129,0.1,-0.007,0.0
13,-1.0,0.0,2.0,0.0,2.0,27.1,0.0123,0.0,-0.0053,0.0
14,1.0,0.0,0.0,0.0,1.0,27.7,0.0063,0.1,-0.0033,0.0
15,0.0,0.0,0.0,2.0,0.0,14.8,0.0063,0.0,-0.0002,0.0
16,-1.0,0.0,2.0,2.0,2.0,9.6,-0.0059,0.0,0.0026000000000000003,0.0
17,-1.0,0.0,0.0,0.0,1.0,-27.4,-0.0058000000000000005,-0.1,0.0032,0.0
18,1.0,0.0,2.0,0.0,1.0,9.1,-0.0051,0.0,0.0027,0.0
19,-2.0,0.0,0.0,2.0,0.0,-205.9,-0.0048000000000000004,0.0,0.0001,0.0
20,-2.0,0.0,2.0,0.0,1.0,1305.5,0.0046,0.0,-0.0024000000000000002,0.0
21,0.0,0.0,2.0,2.0,2.0,7.1,-0.0038,0.0,0.0016,0.0
22,2.0,0.0,2.0,0.0,2.0,6.9,-0.0031000000000000003,0.0,0.0013000000000000002,0.0
23,2.0,0.0,0.0,0.0,0.0,13.8,0.0029000000000000002,0.0,-0.0001,0.0
24,1.0,0.0,2.0,-2.0,2.0,23.9,0.0029000000000000002,0.0,-0.0012000000000000001,0.0
25,0.0,0.0,2.0,0.0,0.0,13.6,0.0026000000000000003,0.0,-0.0001,0.0
26,0.0,0.0,2.0,-2.0,0.0,173.3,-0.0022,0.0,0.0,0.0
27,-1.0,0.0,2.0,0.0,1.0,27.0,0.0021000000000000003,0.0,-0.001,0.0
28,0.0,2.0,0.0,0.0,0.0,182.6,0.0017000000000000001,-0.1,0.0,0.0
29,0.0,2.0,2.0,-2.0,2.0,91.3,-0.0016,0.1,0.0007,0.0
30,-1.0,0.0,0.0,2.0,1.0,32.0,0.0016,0.0,-0.0008,0.0
31,0.0,1.0,0.0,0.0,1.0,386.0,-0.0015,0.0,0.0009000000000000001,0.0
32,1.0,0.0,0.0,-2.0,1.0,-31.7,-0.0013000000000000002,0.0,0.0007,0.0
33,0.0,-1.0,0.0,0.0,1.0,-346.6,-0.0012000000000000001,0.0,0.0006000000000000001,0.0
34,2.0,0.0,-2.0,0.0,0.0,-1095.2,0.0011,0.0,0.0,0.0
35,-1.0,0.0,2.0,2.0,1.0,9.5,-0.001,0.0,0.0005,0.0
36,1.0,0.0,2.0,2.0,2.0,5.6,-0.0008,0.0,0.00030000000000000003,0.0
37,0.0,-1.0,2.0,0.0,2.0,14.2,-0.0007,0.0,0.00030000000000000003,0.0
38,0.0,0.0,2.0,2.0,1.0,7.1,-0.0007,0.0,0.00030000000000000003,0.0
39,1.0,1.0,0.0,-2.0,0.0,-34.8,-0.0007,0.0,0.0,0.0
40,0.0,1.0,2.0,0.0,2.0,13.2,0.0007,0.0,-0.00030000000000000003,0.0
41,-2.0,0.0,0.0,2.0,1.0,-199.8,-0.0006000000000000001,0.0,0.00030000000000000003,0.0
42,0.0,0.0,0.0,2.0,1.0,14.8,-0.0006000000000000001,0.0,0.00030000000000000003,0.0
43,2.0,0.0,2.0,-2.0,2.0,12.8,0.0006000000000000001,0.0,-0.00030000000000000003,0.0
44,1.0,0.0,0.0,2.0,0.0,9.6,0.0006000000000000001,0.0,0.0,0.0
45,1.0,0.0,2.0,-2.0,1.0,23.9,0.0006000000000000001,0.0,-0.00030000000000000003,0.0
46,0.0,0.0,0.0,-2.0,1.0,-14.7,-0.0005,0.0,0.00030000000000000003,0.0
47,0.0,-1.0,2.0,-2.0,1.0,346.6,-0.0005,0.0,0.00030000000000000003,0.0
48,2.0,0.0,2.0,0.0,1.0,6.9,-0.0005,0.0,0.00030000000000000003,0.0
49,1.0,-1.0,0.0,0.0,0.0,29.8,0.0005,0.0,0.0,0.0
50,1.0,0.0,0.0,-1.0,0.0,411.8,-0.0004,0.0,0.0,0.0
51,0.0,0.0,0.0,1.0,0.0,29.5,-0.0004,0.0,0.0,0.0
52,0.0,1.0,0.0,-2.0,0.0,-15.4,-0.0004,0.0,0.0,0.0
53,1.0,0.0,-2.0,0.0,0.0,-26.9,0.0004,0.0,0.0,0.0
54,2.0,0.0,0.0,-2.0,1.0,212.3,0.0004,0.0,-0.0002,0.0
55,0.0,1.0,2.0,-2.0,1.0,119.6,0.0004,0.0,-0.0002,0.0
56,1.0,1.0,0.0,0.0,0.0,25.6,-0.00030000000000000003,0.0,0.0,0.0
57,1.0,-1.0,0.0,-1.0,0.0,-3232.9,-0.00030000000000000003,0.0,0.0,0.0
58,-1.0,-1.0,2.0,2.0,2.0,9.8,-0.00030000000000000003,0.0,0.0001,0.0
59,0.0,-1.0,2.0,2.0,2.0,7.2,-0.00030000000000000003,0.0,0.0001,0.0
60,1.0,-1.0,2.0,0.0,2.0,9.4,-0.00030000000000000003,0.0,0.0001,0.0
61,3.0,0.0,2.0,0.0,2.0,5.5,-0.00030000000000000003,0.0,0.0001,0.0
62,-2.0,0.0,2.0,0.0,2.0,1615.7,-0.00030000000000000003,0.0,0.0001,0.0
63,1.0,0.0,2.0,0.0,0.0,9.1,0.00030000000000000003,0.0,0.0,0.0
64,-1.0,0.0,2.0,4.0,2.0,5.8,-0.0002,0.0,0.0001,0.0
65,1.0,0.0,0.0,0.0,2.0,27.8,-0.0002,0.0,0.0001,0.0
66,-1.0,0.0,2.0,-2.0,1.0,-32.6,-0.0002,0.0,0.0001,0.0
67,0.0,-2.0,2.0,-2.0,1.0,6786.3,-0.0002,0.0,0.0001,0.0
68,-2.0,0.0,0.0,0.0,1.0,-13.7,-0.0002,0.0,0.0001,0.0
69,2.0,0.0,0.0,0.0,1.0,13.8,0.0002,0.0,-0.0001,0.0
70,3.0,0.0,0.0,0.0,0.0,9.2,0.0002,0.0,0.0,0.0
71,1.0,1.0,2.0,0.0,2.0,8.9,0.0002,0.0,-0.0001,0.0
72,0.0,0.0,2.0,1.0,2.0,9.3,0.0002,0.0,-0.0001,0.0
73,1.0,0.0,0.0,2.0,1.0,9.6,-0.0001,0.0,0.0,0.0
74,1.0,0.0,2.0,2.0,1.0,5.6,-0.0001,0.0,0.0001,0.0
75,1.0,1.0,0.0,-2.0,1.0,-34.7,-0.0001,0.0,0.0,0.0
76,0.0,1.0,0.0,2.0,0.0,14.2,-0.0001,0.0,0.0,0.0
77,0.0,1.0,2.0,-2.0,0.0,117.5,-0.0001,0.0,0.0,0.0
78,0.0,1.0,-2.0,2.0,0.0,-329.8,-0.0001,0.0,0.0,0.0
79,1.0,0.0,-2.0,2.0,0.0,23.8,-0.0001,0.0,0.0,0.0
80,1.0,0.0,-2.0,-2.0,0.0,-9.5,-0.0001,0.0,0.0,0.0
81,1.0,0.0,2.0,-2.0,0.0,32.8,-0.0001,0.0,0.0,0.0
82,1.0,0.0,0.0,-4.0,0.0,-10.1,-0.0001,0.0,0.0,0.0
83,2.0,0.0,0.0,-4.0,0.0,-15.9,-0.0001,0.0,0.0,0.0
84,0.0,0.0,2.0,4.0,2.0,4.8,-0.0001,0.0,0.0,0.0
85,0.0,0.0,2.0,-1.0,2.0,25.4,-0.0001,0.0,0.0,0.0
86,-2.0,0.0,2.0,4.0,2.0,7.3,-0.0001,0.0,0.0001,0.0
87,2.0,0.0,2.0,2.0,2.0,4.7,-0.0001,0.0,0.0,0.0
88,0.0,-1.0,2.0,0.0,1.0,14.2,-0.0001,0.0,0.0,0.0
89,0.0,0.0,-2.0,0.0,1.0,-13.6,-0.0001,0.0,0.0,0.0
90,0.0,0.0,4.0,-2.0,2.0,12.7,0.0001,0.0,0.0,0.0
91,0.0,1.0,0.0,0.0,2.0,409.2,0.0001,0.0,0.0,0.0
92,1.0,1.0,2.0,-2.0,2.0,22.5,0.0001,0.0,-0.0001,0.0
93,3.0,0.0,2.0,-2.0,2.0,8.7,0.0001,0.0,0.0,0.0
94,-2.0,0.0,2.0,2.0,2.0,14.6,0.0001,0.0,-0.0001,0.0
95,-1.0,0.0,0.0,0.0,2.0,-27.3,0.0001,0.0,-0.0001,0.0
96,0.0,0.0,-2.0,2.0,1.0,-169.0,0.0001,0.0,0.0,0.0
97,0.0,1.0,2.0,0.0,1.0,13.1,0.0001,0.0,0.0,0.0
98,-1.0,0.0,4.0,0.0,2.0,9.1,0.0001,0.0,0.0,0.0
99,2.0,1.0,0.0,-2.0,0.0,131.7,0.0001,0.0,0.0,0.0
100,2.0,0.0,0.0,2.0,0.0,7.1,0.0001,0.0,0.0,0.0
101,2.0,0.0,2.0,-2.0,1.0,12.8,0.0001,0.0,-0.0001,0.0
102,2.0,0.0,-2.0,0.0,1.0,-943.2,0.0001,0.0,0.0,0.0
103,1.0,-1.0,0.0,-2.0,0.0,-29.3,0.0001,0.0,0.0,0.0
104,-1.0,0.0,0.0,1.0,1.0,-388.3,0.0001,0.0,0.0,0.0
105,-1.0,-1.0,0.0,2.0,1.0,35.0,0.0001,0.0,0.0,0.0
106,0.0,1.0,0.0,1.0,0.0,27.3,0.0001,0.0,0.0,0.0
"""

# second to radian
s2r = (1/3600) * (pi/180)

def get_P(T):
    """
    IAU 1976 Precession Model

    Arguments
    ---------
        T (float) : centuries from J2000

    Returns
    -------
        Precession Matrix
    """
    z   = 2306.2181 * T + 1.09468 * T**2 + 0.018203 * T**3
    tet = 2004.3109 * T + 0.42665 * T**2 + 0.041833 * T**3
    zet = 2306.2181 * T + 0.30188 * T**2 + 0.017998 * T**3

    z, tet, zet = z*s2r, tet*s2r, zet*s2r
    
    row1 = [cos(z)*cos(tet)*cos(zet) - sin(z)*sin(zet),
            -cos(z)*cos(tet)*sin(zet) - sin(z)*cos(zet),
            -cos(z)*sin(tet)]
    row2 = [sin(z)*cos(tet)*cos(zet) + cos(z)*sin(zet),
            -sin(z)*cos(tet)*sin(zet) + cos(z)*cos(zet),
            -sin(z)*sin(tet)]
    row3 = [sin(tet)*cos(zet), -sin(tet)*sin(zet), cos(tet)]
    return array([row1, row2, row3])



def get_N(T):
    """
    IAU 1980 Nutation Model

    Arguments
    ---------
        T (float) : centuries from J2000

    Returns
    -------
        Nutation Matrix
    """
    df = pd.read_csv(StringIO(nut_IAU1980))
    df.set_index('i', inplace=True)

    for col in ['A_0j', 'A_1j', 'B_0j', 'B_1j']:
        df[col] = df[col] * s2r

    e = (23*3600 + 26*60 + 21.448) - 46.8150 * T \
        - 0.00059 * T**2 + 0.001813 * T**3

    e = e * s2r

    r = 1_296_000

    a1 = 485866.733 + (1325*r + 715922.633)*T + 31.310*T**2 + 0.064*T**3
    a2 = 1287099.804 + (99*r + 1292581.224)*T - 0.577*T**2 - 0.012*T**3
    a3 = 335778.877 + (1342*r + 295263.137)*T - 13.257*T**2 + 0.011*T**3
    a4 = 1072261.307 + (1236*r +1105601.328)*T - 6.891*T**2 + 0.019*T**3
    a5 = 450160.280 - (5*r + 482890.539)*T + 7.455*T**2 + 0.008*T**3

    a = array([a1, a2, a3, a4, a5])
    a = a * s2r

    d_psi = 0
    d_e = 0

    for j in range(1, len(df)+1):
        tmp = 0
        for i in range(1, 6):
            tmp = tmp + (df.loc[j, 'k_i'+str(i)] * a[i-1])
        d_psi = d_psi + (df.loc[j, 'A_0j']+df.loc[j, 'A_1j']*T)*sin(tmp)
        d_e = d_e + (df.loc[j, 'B_0j']+df.loc[j, 'B_1j']*T)*cos(tmp)

    row1 = [cos(d_psi), -cos(e)*sin(d_psi), -sin(e)*sin(d_psi)]
           
    row2 = [sin(d_psi)*cos(d_e + e),
            sin(e)*sin(d_e + e) + cos(d_psi)*cos(e)*cos(d_e + e),
            sin(e)*cos(d_psi)*cos(d_e + e) - sin(d_e + e)*cos(e)]

    row3 = [sin(d_psi)*sin(d_e + e),
            -sin(e)*cos(d_e + e) + sin(d_e + e)*cos(d_psi)*cos(e),
            sin(e)*sin(d_e + e)*cos(d_psi) + cos(e)*cos(d_e + e)]
    return array([row1, row2, row3])


def icrf2cep(icrf, t):
    t = utc2tdb(t)
    T = (datetime_to_jd(t) - 2451545) / 36525 # centuries from J2000
    P = get_P(T)
    N = get_N(T)
    cep = matmul(matmul(N, P), icrf)
    return cep

